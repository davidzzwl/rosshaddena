{
	"scope": "query.xml.xpath - string",

	"completions":
	[
		// axis specifiers
		{ "trigger": "ancestor\taxis", "contents": "ancestor::" },
		{ "trigger": "ancestor-or-self\taxis", "contents": "ancestor-or-self::" },
		{ "trigger": "attribute\taxis", "contents": "attribute::" },
		{ "trigger": "child\taxis", "contents": "child::" },
		{ "trigger": "descendant\taxis", "contents": "descendant::" },
		{ "trigger": "descendant-or-self\taxis", "contents": "descendant-or-self::" },
		{ "trigger": "following\taxis", "contents": "following::" },
		{ "trigger": "following-sibling\taxis", "contents": "following-sibling::" },
		{ "trigger": "namespace\taxis", "contents": "namespace::" },
		{ "trigger": "parent\taxis", "contents": "parent::" },
		{ "trigger": "preceding\taxis", "contents": "preceding::" },
		{ "trigger": "preceding-sibling\taxis", "contents": "preceding-sibling::" },
		{ "trigger": "self\taxis", "contents": "self::" },
		
		// node type specifiers
		{ "trigger": "text\tnode type", "contents": "text()" },
		{ "trigger": "node\tnode type", "contents": "node()" },
		//{ "trigger": "comment\tnode type", "contents": "comment()" }, // commented out because comment nodes are ignored during the xml tree building
		//{ "trigger": "processing-instruction\tnode type", "contents": "processing-instruction()" }, // commented out because we ignore processing instructions when parsing xml
		
		// nodeset functions
		{ "trigger": "last\tnodeset function", "contents": "last()" },
		{ "trigger": "position\tnodeset function", "contents": "position()" },
		{ "trigger": "count\tnodeset function", "contents": "count()" },
		{ "trigger": "local-name\tnodeset function", "contents": "local-name($1)" },
		{ "trigger": "namespace-uri\tnodeset function", "contents": "namespace-uri($1)" },
		{ "trigger": "name\tnodeset function", "contents": "name($1)" },
		
		// string functions
		{ "trigger": "string\tstring function", "contents": "string($1)" },
		{ "trigger": "concat\tstring function", "contents": "concat($1, $2)" },
		{ "trigger": "starts-with\tstring function", "contents": "starts-with($1, $2)" },
		{ "trigger": "contains\tstring function", "contents": "contains($1, $2)" },
		{ "trigger": "substring-before\tstring function", "contents": "substring-before($1, $2)" },
		{ "trigger": "substring-after\tstring function", "contents": "substring-after($1, $2)" },
		{ "trigger": "substring\tstring function", "contents": "substring($1, $2)" },
		{ "trigger": "string-length\tstring function", "contents": "string-length($1)" },
		{ "trigger": "normalize-space\tstring function", "contents": "normalize-space($1)" },
		{ "trigger": "translate\tstring function", "contents": "translate($1, $2, $3)" },
		
		// boolean functions
		{ "trigger": "boolean\tboolean function", "contents": "boolean($1)" },
		{ "trigger": "not\tboolean function", "contents": "not($1)" },
		{ "trigger": "true\tboolean function", "contents": "true()" },
		{ "trigger": "false\tboolean function", "contents": "false()" },
		{ "trigger": "lang\tboolean function", "contents": "lang($1)" },
		
		// number functions
		{ "trigger": "number\tnumber function", "contents": "number($1)" },
		{ "trigger": "sum\tnumber function", "contents": "sum($1)" },
		{ "trigger": "floor\tnumber function", "contents": "floor($1)" },
		{ "trigger": "ceiling\tnumber function", "contents": "ceiling($1)" },
		{ "trigger": "round\tnumber function", "contents": "round($1)" },
		
		// custom functions
		{ "trigger": "upper-case\tXPath 2.0 function", "contents": "upper-case($1)" },
		{ "trigger": "lower-case\tXPath 2.0 function", "contents": "lower-case($1)" },
		{ "trigger": "ends-with\tXPath 2.0 function", "contents": "ends-with($1, $2)" },
		{ "trigger": "tokenize\tXPath 2.0 function", "contents": "tokenize($1, $2)" },
		{ "trigger": "matches\tXPath 2.0 function", "contents": "matches($1, $2)" },
		{ "trigger": "print\tcustom function", "contents": "print($1)" }
		
	]
}

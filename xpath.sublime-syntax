%YAML 1.2
---
name: XPath 1.0
scope: query.xml.xpath # http://www.w3.org/TR/xpath/
variables:
  QName: '(?![\d.\-])[\w.\-]+'
  Prefix: '(?:{{QName}}\s*:)?'
  NCName: '{{Prefix}}(?:{{QName}}|\*)'
  Attribute: '@\s*(?:{{NCName}})?'
contexts: # NOTE: these scope names don't represent what they should, they are set for best syntax highlighting
  main: # TODO: obey 3.7 Lexical Structure rules
    - match: '(/{1,2})\s*(\*)?'
      captures:
        1: punctuation.separator.xpath.location_step
        2: variable.parameter.xpath # NameTest
    - match: '(?<!\.)\.(?!\d)\.?(?!\.)'
      scope: keyword.control.flow.xpath # AxisStep
    - match: '\]|\)'
      scope: invalid.illegal.stray-bracket-end
    - match: '\['
      scope: punctuation.definition.arguments.begin.xpath.predicate comment
      push:
        - meta_scope: xpath.predicate
        - match: '\]'
          scope: punctuation.definition.arguments.end.xpath.predicate comment
          pop: true
        - include: main
    - match: '\('
      scope: punctuation.definition.arguments.begin.xpath.subexpression comment
      push:
        - meta_scope: meta.block.query.xpath
        - match: '\)'
          scope: punctuation.definition.arguments.end.xpath.subexpression comment
          pop: true
        - include: main
    - match: '{{Attribute}}'
      scope: keyword.control.flow.xpath # Attribute
    - match: '(comment|text|processing-instruction|node)\s*\(\s*\)'
      scope: storage.type.xpath.node_type # NodeType
    - match: '(?:\b(?<!/)|(?<=\d))(?:and|or|mod|div)(?:\b|(?=\d))|\*|\||\+|-|!?=|<=?|>=?'
      scope: keyword.operator.xpath # Operator
    - match: '((?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|namespace|parent|preceding(?:-sibling)?|self)\s*::)\s*(?:({{NCName}})?|({{Attribute}})?)'
      captures:
        1: constant.language.xpath.axis_name # AxisName
        2: variable.parameter.xpath # NameTest
        3: keyword.control.flow.xpath # Attribute
    - match: '"'
      scope: punctuation.definition.string.begin.xpath
      push:
        - meta_scope: string.quoted.double.xpath # Literal
        - match: '"'
          scope: punctuation.definition.string.end.xpath
          pop: true
    - match: "'"
      scope: punctuation.definition.string.begin.xpath
      push:
        - meta_scope: string.quoted.single.xpath # Literal
        - match: "'"
          captures:
            0: punctuation.definition.string.end.xpath
          pop: true
    - match: '\d*\.\d+|\d+'
      scope: constant.numeric.xpath # Number
    - match: '\s+'
      scope: white_space.xpath # ExprWhitespace
    - match: '\$({{QName}})?'
      scope: entity.name.variable.xpath support.function.builtin.xpath.variable # VariableReference
    - match: '({{Prefix}}{{QName}})\s*(\()'
      captures:
        0: entity.name.function.xpath # NameTest
        2: punctuation.definition.arguments.begin.xpath.subexpression comment
      push:
        - meta_scope: meta.function-call.xpath
        - match: '\)'
          scope: punctuation.definition.arguments.end.xpath.subexpression comment
          pop: true
        - match: ','
          scope: punctuation.separator.xpath.arguments
        - include: main
    - match: '{{NCName}}'
      scope: variable.parameter.xpath # NameTest
    
  